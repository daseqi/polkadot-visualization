ApiPromise {
  __phantom: <BN: 0>,
  _consts: {
    system: {
      blockHashCount: <BN: 960>,
      maximumBlockWeight: <BN: 1d1a94a2000>,
      dbWeight: [Type [Map]],
      blockExecutionWeight: <BN: 12a05f200>,
      extrinsicBaseWeight: <BN: 7735940>,
      maximumBlockLength: <BN: 500000>
    },
    babe: { epochDuration: <BN: 258>, expectedBlockTime: <BN: 1770> },
    timestamp: { minimumPeriod: <BN: bb8> },
    indices: { deposit: <BN: 26ce1b82aa> },
    balances: { existentialDeposit: <BN: 635750aa> },
    transactionPayment: { transactionByteFee: <BN: fe5024>, weightToFee: [Vec] },
    staking: {
      sessionsPerEra: <BN: 6>,
      bondingDuration: <BN: 1c>,
      slashDeferDuration: <BN: 1b>,
      electionLookahead: <BN: 96>,
      maxIterations: <BN: a>,
      minSolutionScoreBump: <BN: 7a120>,
      maxNominatorRewardedPerValidator: <BN: 40>
    },
    finalityTracker: { windowSize: <BN: 65>, reportLatency: <BN: 3e8> },
    democracy: {
      enactmentPeriod: <BN: 1c200>,
      launchPeriod: <BN: 189c0>,
      votingPeriod: <BN: 189c0>,
      minimumDeposit: <BN: 26ce1b82aa>,
      fastTrackVotingPeriod: <BN: 708>,
      cooloffPeriod: <BN: 189c0>,
      preimageByteDeposit: <BN: fe5024>,
      maxVotes: <BN: 64>
    },
    electionsPhragmen: {
      candidacyBond: <BN: 26ce1b82aa>,
      votingBond: <BN: 1f0b49352>,
      desiredMembers: <BN: 13>,
      desiredRunnersUp: <BN: 13>,
      termDuration: <BN: 3840>,
      moduleId: [Type [Uint8Array]]
    },
    treasury: {
      proposalBond: <BN: c350>,
      proposalBondMinimum: <BN: 3081a263548>,
      spendPeriod: <BN: 15180>,
      burn: <BN: 7d0>,
      tipCountdown: <BN: 3840>,
      tipFindersFee: <BN: 14>,
      tipReportDepositBase: <BN: 26ce1b82aa>,
      tipReportDepositPerByte: <BN: 635750aa>,
      moduleId: [Type [Uint8Array]]
    },
    claims: { prefix: [Bytes [Uint8Array]] },
    identity: {
      basicDeposit: <BN: 1840d131aa4>,
      fieldDeposit: <BN: 610344c604>,
      subAccountDeposit: <BN: 4d9c370554>,
      maxSubAccounts: <BN: 64>,
      maxAdditionalFields: <BN: 64>,
      maxRegistrars: <BN: 14>
    },
    society: {
      candidateDeposit: <BN: 1840d131aa4>,
      wrongSideDeduction: <BN: 4d9c370554>,
      maxStrikes: <BN: a>,
      periodSpend: <BN: 4bca8dbb3408>,
      rotationPeriod: <BN: bb80>,
      challengePeriod: <BN: 189c0>,
      moduleId: [Type [Uint8Array]]
    },
    recovery: {
      configDepositBase: <BN: c206898d52>,
      friendDepositFactor: <BN: 13670dc134>,
      maxFriends: <BN: 9>,
      recoveryDeposit: <BN: c206898d52>
    },
    vesting: { minVestedTransfer: <BN: f2882bf0a68> },
    proxy: {
      proxyDepositBase: <BN: 308699f4088>,
      proxyDepositFactor: <BN: 147d34e68>,
      maxProxies: <BN: 20>,
      maxPending: <BN: 20>,
      announcementDepositBase: <BN: 308699f4088>,
      announcementDepositFactor: <BN: 28fa69cd0>
    }
  },
  _derive: {
    accounts: {
      accountId: [Function (anonymous)],
      flags: [Function (anonymous)],
      idAndIndex: [Function (anonymous)],
      idToIndex: [Function (anonymous)],
      indexToId: [Function (anonymous)],
      indexes: [Function (anonymous)],
      info: [Function (anonymous)]
    },
    balances: {
      all: [Function (anonymous)],
      votingBalance: [Function (anonymous)],
      account: [Function (anonymous)],
      fees: [Function (anonymous)],
      votingBalances: [Function (anonymous)]
    },
    chain: {
      bestNumber: [Function (anonymous)],
      bestNumberFinalized: [Function (anonymous)],
      bestNumberLag: [Function (anonymous)],
      getHeader: [Function (anonymous)],
      subscribeNewHeads: [Function (anonymous)]
    },
    council: {
      proposals: [Function (anonymous)],
      votes: [Function (anonymous)],
      votesOf: [Function (anonymous)]
    },
    democracy: {
      dispatchQueue: [Function (anonymous)],
      locks: [Function (anonymous)],
      nextExternal: [Function (anonymous)],
      preimage: [Function (anonymous)],
      preimages: [Function (anonymous)],
      proposals: [Function (anonymous)],
      referendumIds: [Function (anonymous)],
      referendums: [Function (anonymous)],
      referendumsActive: [Function (anonymous)],
      referendumsFinished: [Function (anonymous)],
      _referendumVotes: [Function (anonymous)],
      _referendumsVotes: [Function (anonymous)],
      _referendumInfo: [Function (anonymous)],
      referendumsInfo: [Function (anonymous)],
      sqrtElectorate: [Function (anonymous)]
    },
    elections: { info: [Function (anonymous)] },
    imOnline: { receivedHeartbeats: [Function (anonymous)] },
    session: {
      eraLength: [Function (anonymous)],
      eraProgress: [Function (anonymous)],
      indexes: [Function (anonymous)],
      info: [Function (anonymous)],
      progress: [Function (anonymous)],
      sessionProgress: [Function (anonymous)]
    },
    society: {
      candidates: [Function (anonymous)],
      info: [Function (anonymous)],
      member: [Function (anonymous)],
      members: [Function (anonymous)]
    },
    staking: {
      accounts: [Function (anonymous)],
      account: [Function (anonymous)],
      currentPoints: [Function (anonymous)],
      _eraExposure: [Function (anonymous)],
      eraExposure: [Function (anonymous)],
      _erasExposure: [Function (anonymous)],
      erasExposure: [Function (anonymous)],
      erasHistoric: [Function (anonymous)],
      _erasPoints: [Function (anonymous)],
      erasPoints: [Function (anonymous)],
      _eraPrefs: [Function (anonymous)],
      eraPrefs: [Function (anonymous)],
      _erasPrefs: [Function (anonymous)],
      erasPrefs: [Function (anonymous)],
      _erasRewards: [Function (anonymous)],
      erasRewards: [Function (anonymous)],
      _eraSlashes: [Function (anonymous)],
      eraSlashes: [Function (anonymous)],
      _erasSlashes: [Function (anonymous)],
      erasSlashes: [Function (anonymous)],
      electedInfo: [Function (anonymous)],
      overview: [Function (anonymous)],
      _ownExposure: [Function (anonymous)],
      ownExposure: [Function (anonymous)],
      _ownExposures: [Function (anonymous)],
      ownExposures: [Function (anonymous)],
      _ownSlash: [Function (anonymous)],
      ownSlash: [Function (anonymous)],
      _ownSlashes: [Function (anonymous)],
      ownSlashes: [Function (anonymous)],
      query: [Function (anonymous)],
      queryMulti: [Function (anonymous)],
      _stakerExposure: [Function (anonymous)],
      stakerExposure: [Function (anonymous)],
      _stakerPoints: [Function (anonymous)],
      stakerPoints: [Function (anonymous)],
      _stakerRewardsEras: [Function (anonymous)],
      _stakerRewards: [Function (anonymous)],
      stakerRewards: [Function (anonymous)],
      stakerRewardsMultiEras: [Function (anonymous)],
      stakerRewardsMulti: [Function (anonymous)],
      _stakerSlashes: [Function (anonymous)],
      stakerSlashes: [Function (anonymous)],
      stashes: [Function (anonymous)],
      nextElected: [Function (anonymous)],
      validators: [Function (anonymous)],
      waitingInfo: [Function (anonymous)]
    },
    technicalCommittee: { proposals: [Function (anonymous)] },
    treasury: { proposals: [Function (anonymous)] },
    tx: {
      events: [Function (anonymous)],
      signingInfo: [Function (anonymous)]
    }
  },
  _extrinsics: [Function (anonymous)] {
    system: {
      fillBlock: [Function],
      remark: [Function],
      setHeapPages: [Function],
      setCode: [Function],
      setCodeWithoutChecks: [Function],
      setChangesTrieConfig: [Function],
      setStorage: [Function],
      killStorage: [Function],
      killPrefix: [Function],
      suicide: [Function]
    },
    babe: {
      reportEquivocation: [Function],
      reportEquivocationUnsigned: [Function]
    },
    timestamp: { set: [Function] },
    indices: {
      claim: [Function],
      transfer: [Function],
      free: [Function],
      forceTransfer: [Function],
      freeze: [Function]
    },
    balances: {
      transfer: [Function],
      setBalance: [Function],
      forceTransfer: [Function],
      transferKeepAlive: [Function]
    },
    authorship: { setUncles: [Function] },
    staking: {
      bond: [Function],
      bondExtra: [Function],
      unbond: [Function],
      withdrawUnbonded: [Function],
      validate: [Function],
      nominate: [Function],
      chill: [Function],
      setPayee: [Function],
      setController: [Function],
      setValidatorCount: [Function],
      increaseValidatorCount: [Function],
      scaleValidatorCount: [Function],
      forceNoEras: [Function],
      forceNewEra: [Function],
      setInvulnerables: [Function],
      forceUnstake: [Function],
      forceNewEraAlways: [Function],
      cancelDeferredSlash: [Function],
      payoutStakers: [Function],
      rebond: [Function],
      setHistoryDepth: [Function],
      reapStash: [Function],
      submitElectionSolution: [Function],
      submitElectionSolutionUnsigned: [Function]
    },
    offences: {},
    session: { setKeys: [Function], purgeKeys: [Function] },
    finalityTracker: { finalHint: [Function] },
    grandpa: {
      reportEquivocation: [Function],
      reportEquivocationUnsigned: [Function],
      noteStalled: [Function]
    },
    imOnline: { heartbeat: [Function] },
    authorityDiscovery: {},
    democracy: {
      propose: [Function],
      second: [Function],
      vote: [Function],
      emergencyCancel: [Function],
      externalPropose: [Function],
      externalProposeMajority: [Function],
      externalProposeDefault: [Function],
      fastTrack: [Function],
      vetoExternal: [Function],
      cancelReferendum: [Function],
      cancelQueued: [Function],
      delegate: [Function],
      undelegate: [Function],
      clearPublicProposals: [Function],
      notePreimage: [Function],
      notePreimageOperational: [Function],
      noteImminentPreimage: [Function],
      noteImminentPreimageOperational: [Function],
      reapPreimage: [Function],
      unlock: [Function],
      removeVote: [Function],
      removeOtherVote: [Function],
      enactProposal: [Function]
    },
    council: {
      setMembers: [Function],
      execute: [Function],
      propose: [Function],
      vote: [Function],
      close: [Function],
      disapproveProposal: [Function]
    },
    technicalCommittee: {
      setMembers: [Function],
      execute: [Function],
      propose: [Function],
      vote: [Function],
      close: [Function],
      disapproveProposal: [Function]
    },
    electionsPhragmen: {
      vote: [Function],
      removeVoter: [Function],
      reportDefunctVoter: [Function],
      submitCandidacy: [Function],
      renounceCandidacy: [Function],
      removeMember: [Function]
    },
    technicalMembership: {
      addMember: [Function],
      removeMember: [Function],
      swapMember: [Function],
      resetMembers: [Function],
      changeKey: [Function],
      setPrime: [Function],
      clearPrime: [Function]
    },
    treasury: {
      proposeSpend: [Function],
      rejectProposal: [Function],
      approveProposal: [Function],
      reportAwesome: [Function],
      retractTip: [Function],
      tipNew: [Function],
      tip: [Function],
      closeTip: [Function]
    },
    claims: {
      claim: [Function],
      mintClaim: [Function],
      claimAttest: [Function],
      attest: [Function],
      moveClaim: [Function]
    },
    dummyParachains: {},
    dummyAttestations: {},
    dummySlots: {},
    dummyRegistrar: {},
    utility: { batch: [Function], asDerivative: [Function] },
    identity: {
      addRegistrar: [Function],
      setIdentity: [Function],
      setSubs: [Function],
      clearIdentity: [Function],
      requestJudgement: [Function],
      cancelRequest: [Function],
      setFee: [Function],
      setAccountId: [Function],
      setFields: [Function],
      provideJudgement: [Function],
      killIdentity: [Function],
      addSub: [Function],
      renameSub: [Function],
      removeSub: [Function],
      quitSub: [Function]
    },
    society: {
      bid: [Function],
      unbid: [Function],
      vouch: [Function],
      unvouch: [Function],
      vote: [Function],
      defenderVote: [Function],
      payout: [Function],
      found: [Function],
      unfound: [Function],
      judgeSuspendedMember: [Function],
      judgeSuspendedCandidate: [Function],
      setMaxMembers: [Function]
    },
    recovery: {
      asRecovered: [Function],
      setRecovered: [Function],
      createRecovery: [Function],
      initiateRecovery: [Function],
      vouchRecovery: [Function],
      claimRecovery: [Function],
      closeRecovery: [Function],
      removeRecovery: [Function],
      cancelRecovered: [Function]
    },
    vesting: {
      vest: [Function],
      vestOther: [Function],
      vestedTransfer: [Function],
      forceVestedTransfer: [Function]
    },
    scheduler: {
      schedule: [Function],
      cancel: [Function],
      scheduleNamed: [Function],
      cancelNamed: [Function],
      scheduleAfter: [Function],
      scheduleNamedAfter: [Function]
    },
    proxy: {
      proxy: [Function],
      addProxy: [Function],
      removeProxy: [Function],
      removeProxies: [Function],
      anonymous: [Function],
      killAnonymous: [Function],
      announce: [Function],
      removeAnnouncement: [Function],
      rejectAnnouncement: [Function],
      proxyAnnounced: [Function]
    },
    multisig: {
      asMultiThreshold1: [Function],
      asMulti: [Function],
      approveAsMulti: [Function],
      cancelAsMulti: [Function]
    }
  },
  _extrinsicType: 4,
  _genesisHash: Type(32) [Uint8Array] [
    176,
    168,
    212,
    147,
    40,
    92,
    45,
    247,
    50,
    144,
    223,
    183,
    230,
    31,
    135,
    15,
    23,
    180,
    24,
    1,
    25,
    122,
    20,
    156,
    169,
    54,
    84,
    73,
    158,
    163,
    218,
    254,
    registry: TypeRegistry {}
  ],
  _isConnected: BehaviorSubject {
    _isScalar: false,
    observers: [],
    closed: false,
    isStopped: false,
    hasError: false,
    thrownError: null,
    _value: true
  },
  _isReady: true,
  _options: { provider: WsProvider {} },
  _query: {
    substrate: {
      code: [Function],
      heapPages: [Function],
      extrinsicIndex: [Function],
      changesTrieConfig: [Function],
      childStorageKeyPrefix: [Function]
    },
    system: {
      account: [Function],
      extrinsicCount: [Function],
      blockWeight: [Function],
      allExtrinsicsLen: [Function],
      blockHash: [Function],
      extrinsicData: [Function],
      number: [Function],
      parentHash: [Function],
      extrinsicsRoot: [Function],
      digest: [Function],
      events: [Function],
      eventCount: [Function],
      eventTopics: [Function],
      lastRuntimeUpgrade: [Function],
      executionPhase: [Function]
    },
    randomnessCollectiveFlip: { randomMaterial: [Function] },
    babe: {
      epochIndex: [Function],
      authorities: [Function],
      genesisSlot: [Function],
      currentSlot: [Function],
      randomness: [Function],
      nextEpochConfig: [Function],
      nextRandomness: [Function],
      segmentIndex: [Function],
      underConstruction: [Function],
      initialized: [Function],
      lateness: [Function]
    },
    timestamp: { now: [Function], didUpdate: [Function] },
    indices: { accounts: [Function] },
    balances: {
      totalIssuance: [Function],
      account: [Function],
      locks: [Function],
      storageVersion: [Function]
    },
    transactionPayment: { nextFeeMultiplier: [Function], storageVersion: [Function] },
    authorship: {
      uncles: [Function],
      author: [Function],
      didSetUncles: [Function]
    },
    staking: {
      historyDepth: [Function],
      validatorCount: [Function],
      minimumValidatorCount: [Function],
      invulnerables: [Function],
      bonded: [Function],
      ledger: [Function],
      payee: [Function],
      validators: [Function],
      nominators: [Function],
      currentEra: [Function],
      activeEra: [Function],
      erasStartSessionIndex: [Function],
      erasStakers: [Function],
      erasStakersClipped: [Function],
      erasValidatorPrefs: [Function],
      erasValidatorReward: [Function],
      erasRewardPoints: [Function],
      erasTotalStake: [Function],
      forceEra: [Function],
      slashRewardFraction: [Function],
      canceledSlashPayout: [Function],
      unappliedSlashes: [Function],
      bondedEras: [Function],
      validatorSlashInEra: [Function],
      nominatorSlashInEra: [Function],
      slashingSpans: [Function],
      spanSlash: [Function],
      earliestUnappliedSlash: [Function],
      snapshotValidators: [Function],
      snapshotNominators: [Function],
      queuedElected: [Function],
      queuedScore: [Function],
      eraElectionStatus: [Function],
      isCurrentSessionFinal: [Function],
      storageVersion: [Function]
    },
    offences: {
      reports: [Function],
      deferredOffences: [Function],
      concurrentReportsIndex: [Function],
      reportsByKindIndex: [Function]
    },
    session: {
      validators: [Function],
      currentIndex: [Function],
      queuedChanged: [Function],
      queuedKeys: [Function],
      disabledValidators: [Function],
      nextKeys: [Function],
      keyOwner: [Function]
    },
    finalityTracker: {
      recentHints: [Function],
      orderedHints: [Function],
      median: [Function],
      update: [Function],
      initialized: [Function]
    },
    grandpa: {
      state: [Function],
      pendingChange: [Function],
      nextForced: [Function],
      stalled: [Function],
      currentSetId: [Function],
      setIdSession: [Function]
    },
    imOnline: {
      heartbeatAfter: [Function],
      keys: [Function],
      receivedHeartbeats: [Function],
      authoredBlocks: [Function]
    },
    democracy: {
      publicPropCount: [Function],
      publicProps: [Function],
      depositOf: [Function],
      preimages: [Function],
      referendumCount: [Function],
      lowestUnbaked: [Function],
      referendumInfoOf: [Function],
      votingOf: [Function],
      locks: [Function],
      lastTabledWasExternal: [Function],
      nextExternal: [Function],
      blacklist: [Function],
      cancellations: [Function],
      storageVersion: [Function]
    },
    council: {
      proposals: [Function],
      proposalOf: [Function],
      voting: [Function],
      proposalCount: [Function],
      members: [Function],
      prime: [Function]
    },
    technicalCommittee: {
      proposals: [Function],
      proposalOf: [Function],
      voting: [Function],
      proposalCount: [Function],
      members: [Function],
      prime: [Function]
    },
    electionsPhragmen: {
      members: [Function],
      runnersUp: [Function],
      electionRounds: [Function],
      voting: [Function],
      candidates: [Function]
    },
    technicalMembership: { members: [Function], prime: [Function] },
    treasury: {
      proposalCount: [Function],
      proposals: [Function],
      approvals: [Function],
      tips: [Function],
      reasons: [Function]
    },
    claims: {
      claims: [Function],
      total: [Function],
      vesting: [Function],
      signing: [Function],
      preclaims: [Function]
    },
    identity: {
      identityOf: [Function],
      superOf: [Function],
      subsOf: [Function],
      registrars: [Function]
    },
    society: {
      founder: [Function],
      rules: [Function],
      candidates: [Function],
      suspendedCandidates: [Function],
      pot: [Function],
      head: [Function],
      members: [Function],
      suspendedMembers: [Function],
      bids: [Function],
      vouching: [Function],
      payouts: [Function],
      strikes: [Function],
      votes: [Function],
      defender: [Function],
      defenderVotes: [Function],
      maxMembers: [Function]
    },
    recovery: {
      recoverable: [Function],
      activeRecoveries: [Function],
      proxy: [Function]
    },
    vesting: { vesting: [Function] },
    scheduler: {
      agenda: [Function],
      lookup: [Function],
      storageVersion: [Function]
    },
    proxy: { proxies: [Function], announcements: [Function] },
    multisig: { multisigs: [Function], calls: [Function] }
  },
  _queryMulti: [Function (anonymous)],
  _rpc: {
    babe: { epochAuthorship: [Function] },
    contracts: {},
    engine: {},
    grandpa: { roundState: [Function], subscribeJustifications: [Function] },
    system: {
      accountNextIndex: [Function],
      dryRun: [Function],
      name: [Function],
      version: [Function],
      chain: [Function],
      chainType: [Function],
      properties: [Function],
      health: [Function],
      localPeerId: [Function],
      localListenAddresses: [Function],
      peers: [Function],
      networkState: [Function],
      addReservedPeer: [Function],
      removeReservedPeer: [Function],
      nodeRoles: [Function]
    },
    rpc: { methods: [Function] },
    author: {
      hasKey: [Function],
      hasSessionKeys: [Function],
      removeExtrinsic: [Function],
      insertKey: [Function],
      rotateKeys: [Function],
      pendingExtrinsics: [Function],
      submitExtrinsic: [Function],
      submitAndWatchExtrinsic: [Function]
    },
    chain: {
      getHeader: [Function],
      getBlock: [Function],
      getBlockHash: [Function],
      getFinalizedHead: [Function],
      subscribeNewHeads: [Function],
      subscribeFinalizedHeads: [Function],
      subscribeAllHeads: [Function]
    },
    childstate: {
      getKeys: [Function],
      getStorage: [Function],
      getStorageHash: [Function],
      getStorageSize: [Function]
    },
    offchain: { localStorageSet: [Function], localStorageGet: [Function] },
    payment: { queryInfo: [Function] },
    state: {
      call: [Function],
      getKeys: [Function],
      getPairs: [Function],
      getKeysPaged: [Function],
      getStorage: [Function],
      getStorageHash: [Function],
      getStorageSize: [Function],
      getMetadata: [Function],
      getRuntimeVersion: [Function],
      queryStorage: [Function],
      queryStorageAt: [Function],
      getReadProof: [Function],
      subscribeRuntimeVersion: [Function],
      subscribeStorage: [Function]
    }
  },
  _rpcCore: Rpc {
    mapping: Map(64) {
      'babe_epochAuthorship' => [Object],
      'contracts_call' => [Object],
      'contracts_getStorage' => [Object],
      'contracts_rentProjection' => [Object],
      'engine_createBlock' => [Object],
      'engine_finalizeBlock' => [Object],
      'grandpa_roundState' => [Object],
      'grandpa_subscribeJustifications' => [Object],
      'system_accountNextIndex' => [Object],
      'system_dryRun' => [Object],
      'system_name' => [Object],
      'system_version' => [Object],
      'system_chain' => [Object],
      'system_chainType' => [Object],
      'system_properties' => [Object],
      'system_health' => [Object],
      'system_localPeerId' => [Object],
      'system_localListenAddresses' => [Object],
      'system_peers' => [Object],
      'system_networkState' => [Object],
      'system_addReservedPeer' => [Object],
      'system_removeReservedPeer' => [Object],
      'system_nodeRoles' => [Object],
      'rpc_methods' => [Object],
      'author_hasKey' => [Object],
      'author_hasSessionKeys' => [Object],
      'author_removeExtrinsic' => [Object],
      'author_insertKey' => [Object],
      'author_rotateKeys' => [Object],
      'author_pendingExtrinsics' => [Object],
      'author_submitExtrinsic' => [Object],
      'author_submitAndWatchExtrinsic' => [Object],
      'chain_getHeader' => [Object],
      'chain_getBlock' => [Object],
      'chain_getBlockHash' => [Object],
      'chain_getFinalizedHead' => [Object],
      'chain_subscribeNewHeads' => [Object],
      'chain_subscribeFinalizedHeads' => [Object],
      'chain_subscribeAllHeads' => [Object],
      'childstate_getKeys' => [Object],
      'childstate_getStorage' => [Object],
      'childstate_getStorageHash' => [Object],
      'childstate_getStorageSize' => [Object],
      'offchain_localStorageSet' => [Object],
      'offchain_localStorageGet' => [Object],
      'payment_queryInfo' => [Object],
      'state_call' => [Object],
      'state_getKeys' => [Object],
      'state_getPairs' => [Object],
      'state_getKeysPaged' => [Object],
      'state_getStorage' => [Object],
      'state_getStorageHash' => [Object],
      'state_getStorageSize' => [Object],
      'state_getChildKeys' => [Object],
      'state_getChildStorage' => [Object],
      'state_getChildStorageHash' => [Object],
      'state_getChildStorageSize' => [Object],
      'state_getMetadata' => [Object],
      'state_getRuntimeVersion' => [Object],
      'state_queryStorage' => [Object],
      'state_queryStorageAt' => [Object],
      'state_getReadProof' => [Object],
      'state_subscribeRuntimeVersion' => [Object],
      'state_subscribeStorage' => [Object]
    },
    provider: WsProvider {},
    sections: [
      'babe',       'contracts',
      'engine',     'grandpa',
      'system',     'rpc',
      'author',     'chain',
      'childstate', 'offchain',
      'payment',    'state'
    ],
    author: {
      hasKey: [Function],
      hasSessionKeys: [Function],
      removeExtrinsic: [Function],
      insertKey: [Function],
      rotateKeys: [Function],
      pendingExtrinsics: [Function],
      submitExtrinsic: [Function],
      submitAndWatchExtrinsic: [Function]
    },
    babe: { epochAuthorship: [Function] },
    chain: {
      getHeader: [Function],
      getBlock: [Function],
      getBlockHash: [Function],
      getFinalizedHead: [Function],
      subscribeNewHeads: [Function],
      subscribeFinalizedHeads: [Function],
      subscribeAllHeads: [Function]
    },
    childstate: {
      getKeys: [Function],
      getStorage: [Function],
      getStorageHash: [Function],
      getStorageSize: [Function]
    },
    contracts: {},
    engine: {},
    grandpa: { roundState: [Function], subscribeJustifications: [Function] },
    offchain: { localStorageSet: [Function], localStorageGet: [Function] },
    payment: { queryInfo: [Function] },
    rpc: { methods: [Function] },
    state: {
      call: [Function],
      getKeys: [Function],
      getPairs: [Function],
      getKeysPaged: [Function],
      getStorage: [Function],
      getStorageHash: [Function],
      getStorageSize: [Function],
      getMetadata: [Function],
      getRuntimeVersion: [Function],
      queryStorage: [Function],
      queryStorageAt: [Function],
      getReadProof: [Function],
      subscribeRuntimeVersion: [Function],
      subscribeStorage: [Function]
    },
    system: {
      accountNextIndex: [Function],
      dryRun: [Function],
      name: [Function],
      version: [Function],
      chain: [Function],
      chainType: [Function],
      properties: [Function],
      health: [Function],
      localPeerId: [Function],
      localListenAddresses: [Function],
      peers: [Function],
      networkState: [Function],
      addReservedPeer: [Function],
      removeReservedPeer: [Function],
      nodeRoles: [Function]
    }
  },
  _runtimeChain: [String (Text): 'Kusama'] { registry: TypeRegistry {} },
  _runtimeMetadata: Metadata(2) [Map] {
    'magicNumber' => <BN: 6174656d>,
    'metadata' => Type {
      registry: TypeRegistry {},
      isV0: [Getter],
      asV0: [Getter],
      isV1: [Getter],
      asV1: [Getter],
      isV2: [Getter],
      asV2: [Getter],
      isV3: [Getter],
      asV3: [Getter],
      isV4: [Getter],
      asV4: [Getter],
      isV5: [Getter],
      asV5: [Getter],
      isV6: [Getter],
      asV6: [Getter],
      isV7: [Getter],
      asV7: [Getter],
      isV8: [Getter],
      asV8: [Getter],
      isV9: [Getter],
      asV9: [Getter],
      isV10: [Getter],
      asV10: [Getter],
      isV11: [Getter],
      asV11: [Getter]
    },
    registry: TypeRegistry {}
  },
  _runtimeVersion: Type(7) [Map] {
    'specName' => [String (Text): 'kusama'] { registry: TypeRegistry {} },
    'implName' => [String (Text): 'parity-kusama'] { registry: TypeRegistry {} },
    'authoringVersion' => <BN: 2>,
    'specVersion' => <BN: 7e7>,
    'implVersion' => <BN: 0>,
    'apis' => Vec(12) [
      [Type],
      [Type],
      [Type],
      [Type],
      [Type],
      [Type],
      [Type],
      [Type],
      [Type],
      [Type],
      [Type],
      [Type],
      registry: TypeRegistry {},
      _Type: [class Type extends Tuple]
    ],
    'transactionVersion' => <BN: 3>,
    registry: TypeRegistry {},
    specName: [Getter],
    implName: [Getter],
    authoringVersion: [Getter],
    specVersion: [Getter],
    implVersion: [Getter],
    apis: [Getter],
    transactionVersion: [Getter]
  },
  _rx: {
    consts: {
      system: [Object],
      babe: [Object],
      timestamp: [Object],
      indices: [Object],
      balances: [Object],
      transactionPayment: [Object],
      staking: [Object],
      finalityTracker: [Object],
      democracy: [Object],
      electionsPhragmen: [Object],
      treasury: [Object],
      claims: [Object],
      identity: [Object],
      society: [Object],
      recovery: [Object],
      vesting: [Object],
      proxy: [Object]
    },
    query: {
      substrate: [Object],
      system: [Object],
      randomnessCollectiveFlip: [Object],
      babe: [Object],
      timestamp: [Object],
      indices: [Object],
      balances: [Object],
      transactionPayment: [Object],
      authorship: [Object],
      staking: [Object],
      offences: [Object],
      session: [Object],
      finalityTracker: [Object],
      grandpa: [Object],
      imOnline: [Object],
      democracy: [Object],
      council: [Object],
      technicalCommittee: [Object],
      electionsPhragmen: [Object],
      technicalMembership: [Object],
      treasury: [Object],
      claims: [Object],
      identity: [Object],
      society: [Object],
      recovery: [Object],
      vesting: [Object],
      scheduler: [Object],
      proxy: [Object],
      multisig: [Object]
    },
    tx: [Function (anonymous)] {
      system: [Object],
      babe: [Object],
      timestamp: [Object],
      indices: [Object],
      balances: [Object],
      authorship: [Object],
      staking: [Object],
      offences: {},
      session: [Object],
      finalityTracker: [Object],
      grandpa: [Object],
      imOnline: [Object],
      authorityDiscovery: {},
      democracy: [Object],
      council: [Object],
      technicalCommittee: [Object],
      electionsPhragmen: [Object],
      technicalMembership: [Object],
      treasury: [Object],
      claims: [Object],
      dummyParachains: {},
      dummyAttestations: {},
      dummySlots: {},
      dummyRegistrar: {},
      utility: [Object],
      identity: [Object],
      society: [Object],
      recovery: [Object],
      vesting: [Object],
      scheduler: [Object],
      proxy: [Object],
      multisig: [Object]
    },
    hasSubscriptions: true,
    registry: TypeRegistry {},
    rpc: {
      babe: [Object],
      contracts: {},
      engine: {},
      grandpa: [Object],
      system: [Object],
      rpc: [Object],
      author: [Object],
      chain: [Object],
      childstate: [Object],
      offchain: [Object],
      payment: [Object],
      state: [Object]
    },
    queryMulti: [Function (anonymous)],
    signer: undefined,
    runtimeVersion: Type(7) [Map] {
      'specName' => [Text],
      'implName' => [Text],
      'authoringVersion' => <BN: 2>,
      'specVersion' => <BN: 7e7>,
      'implVersion' => <BN: 0>,
      'apis' => [Vec],
      'transactionVersion' => <BN: 3>,
      registry: TypeRegistry {},
      specName: [Getter],
      implName: [Getter],
      authoringVersion: [Getter],
      specVersion: [Getter],
      implVersion: [Getter],
      apis: [Getter],
      transactionVersion: [Getter]
    },
    extrinsicType: 4,
    genesisHash: Type(32) [Uint8Array] [
      176,
      168,
      212,
      147,
      40,
      92,
      45,
      247,
      50,
      144,
      223,
      183,
      230,
      31,
      135,
      15,
      23,
      180,
      24,
      1,
      25,
      122,
      20,
      156,
      169,
      54,
      84,
      73,
      158,
      163,
      218,
      254,
      registry: TypeRegistry {}
    ],
    derive: {
      accounts: [Object],
      balances: [Object],
      chain: [Object],
      council: [Object],
      democracy: [Object],
      elections: [Object],
      imOnline: [Object],
      session: [Object],
      society: [Object],
      staking: [Object],
      technicalCommittee: [Object],
      treasury: [Object],
      tx: [Object]
    }
  },
  _type: 'promise',
  _decorateMethod: [Function: decorateMethod],
  _rxDecorateMethod: [Function (anonymous)]
}
